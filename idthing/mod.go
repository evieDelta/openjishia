package idthing

import (
	"encoding/json"
	"io/ioutil"
	"os"
	"strconv"
	"time"

	"codeberg.org/eviedelta/drc"
	"codeberg.org/eviedelta/trit"
	"github.com/bwmarrin/discordgo"
	"github.com/eviedelta/openjishia/idthing/sid"
	"github.com/eviedelta/openjishia/module"
)

func GetIDTimeString(id string) (time.Time, error) {
	s, err := sid.Parse(id)
	if err != nil {
		return time.Time{}, err
	}
	return GetIDTime(s), nil
}

func GetIDTime(id sid.ID) time.Time {
	return gen.IDTime(id)
}

func Get() sid.ID {
	return gen.Get()
}

var gen *sid.Generator

const filename = "idthingy.json"

var Module = &module.Module{
	Name: "idthing",

	Commands: []*drc.Command{
		getnewid,
		idtime,
	},

	InitFunc: func(m *module.Module) error {
		var epoch time.Time

		dat, err := ioutil.ReadFile(filename)
		if err != nil {
			if !os.IsNotExist(err) {
				return err
			}
			epoch = time.Now().UTC()

			ndt, err := json.Marshal(epoch)
			if err != nil {
				return err
			}
			if err := ioutil.WriteFile(filename, ndt, 0600); err != nil {
				return err
			}
		} else {
			err = json.Unmarshal(dat, &epoch)
			if err != nil {
				return err
			}
		}

		gen = &sid.Generator{
			Epoch:  epoch,
			Worker: 0,
		}
		return nil
	},
}

// getnewid debug function for internal ID generator
var getnewid = &drc.Command{
	Name:         "getnewid",
	Manual:       []string{"debug function for internal ID generator"},
	CommandPerms: discordgo.PermissionSendMessages,
	Permissions: drc.Permissions{
		BotAdmin: trit.Unset,
		Discord:  0,
	},
	Config: drc.CfgCommand{
		Listable:    false,
		MinimumArgs: 0,
	},
	Exec: cfGetnewid,
}

func cfGetnewid(ctx *drc.Context) error {
	return ctx.Replyf("```\n%v\n```", gen.Get())
}

// idtime gets the time contained within the IDs generated by the bot (not discord ones)
var idtime = &drc.Command{
	Name:         "nidtime",
	Manual:       []string{"gets the time contained within the IDs generated by the bot (not discord ones)"},
	CommandPerms: discordgo.PermissionSendMessages,
	Permissions: drc.Permissions{
		BotAdmin: trit.Unset,
		Discord:  0,
	},
	Config: drc.CfgCommand{
		Listable:    false,
		MinimumArgs: 0,
	},
	Exec: cfIdtime,
}

func cfIdtime(ctx *drc.Context) error {
	t, err := GetIDTimeString(ctx.RawArgs[0])
	if err != nil {
		return err
	}
	udu := t.UTC()
	now := time.Now().UTC()
	return ctx.ReplyEmbed(&discordgo.MessageEmbed{
		Description: udu.Format("**2006-01-02 15:04:05**") + "\n(" + strconv.Itoa(
			int(
				(now.Sub(udu).Truncate(time.Hour/24) / 24).Hours(),
			),
		) + " Days, " +
			now.Sub(
				udu.Add(
					((now.Sub(udu) / 24).Truncate(time.Hour))*24,
				),
			).Truncate(time.Second).String() + " Ago)",
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:  "RFC-3339",
				Value: "```\n" + udu.Format(time.RFC3339) + "```",
			},
		},
		Footer: &discordgo.MessageEmbedFooter{
			Text: ctx.RawArgs[0],
		},
	})
}
